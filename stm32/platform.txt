
# Arduino STM32 Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=STM32 Cortex-M4F Boards
version=0.1

# STM32 compile variables
# ----------------------

compiler.path={runtime.ide.path}/hardware/tools/gcc-arm-none-eabi-4.8.3-2014q1/bin/

compiler.cmsis_dir={build.system.path}/CMSIS/
compiler.stdperiph_dir={build.system.path}/{build.series}_StdPeriph_Driver/

compiler.bflags=-O3 -Os -Wall -Werror-implicit-function-declaration -Wno-sign-compare -Wno-strict-aliasing -Wdouble-promotion -mcpu=cortex-m4 -mlittle-endian -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard -fsingle-precision-constant -ffast-math -D__FPU_PRESENT=1 -DARM_MATH_CM4 -fno-common -fno-exceptions -ffunction-sections -fdata-sections -nostartfiles -DHSE_VALUE={build.hse_value} -D{build.mcu} -DUSE_STDPERIPH_DRIVER -DSERIES={build.series}

compiler.incflags="-I{compiler.cmsis_dir}Device/ST/{build.series}/Include" "-I{compiler.cmsis_dir}Include" "-I{compiler.stdperiph_dir}inc"
# -I$(VARIANT_DIR) -I$(CORE_DIR)

compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-std=c99 -Wall {compiler.bflags} {compiler.incflags}

compiler.c.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags={compiler.bflags} "-L{compiler.cmsis_dir}Lib/GCC" --static -Wl,--gc-sections "-T{build.variant.path}/{build.ldscript}" --specs=nano.specs -lnosys -lstdc++ -lm -u _printf_float

compiler.S.cmd=arm-none-eabi-as
compiler.S.flags=-mlittle-endian -mthumb

compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-std=c++0x -felide-constructors -fno-rtti {compiler.bflags} {compiler.incflags}

compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=arm-none-eabi-objcopy

compiler.ldflags=

compiler.size.cmd=arm-none-eabi-size

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# USB Flags
# ---------
# build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value. 
# build.usb_manufacturer="Unknown"


# ST compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" -c {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" -c {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile assembly file
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" -c {compiler.c.flags} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {object_files} -Wl,-whole-archive "{build.variant.path}/{build.variant_system_lib}" "{build.path}/{archive_file}" -Wl,-no-whole-archive -o "{build.path}/{build.project_name}.elf" -larm_cortexM4lf_math

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*


# STM32 Uploader tools
# -------------------

# # DFU
# tools.dfu_util.cmd=dfu-util
# tools.dfu_util.cmd.windows=dfu-util.exe
# tools.dfu_util.path={runtime.ide.path}/hardware/tools

# tools.dfu_util.upload.params.verbose=-v
# tools.dfu_util.upload.params.quiet=
# tools.dfu_util.upload.pattern="{path}/{cmd}" -d 0483:df11 -a 0 -s 0x08000000 -D "{build.path}/{build.project_name}.bin"

# Serial
tools.stm32flash.cmd=stm32flash
tools.stm32flash.cmd.windows=stm32flash.exe
tools.stm32flash.path={runtime.ide.path}/hardware/koduino/stm32/system/stm32flash

tools.stm32flash.upload.params.verbose=-V
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern="{path}/{cmd}" -i {upload.sequence} -w "{build.path}/{build.project_name}.bin" -R -b {upload.baud} {serial.port}

