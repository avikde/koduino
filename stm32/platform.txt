# @authors Avik De <avikde@gmail.com>

# This file is part of koduino <https://github.com/avikde/koduino>

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, see <http://www.gnu.org/licenses/>.

# Arduino STM32 Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=Koduino STM32 Boards
version=0.1

# STM32 compile variables
# ----------------------

compiler.path={runtime.ide.path}/hardware/tools/gcc-arm-none-eabi-4.8.3-2014q1/bin/

compiler.cmsis_dir={build.system.path}/CMSIS/
compiler.stdperiph_dir={build.system.path}/{build.series}_StdPeriph_Driver/

compiler.bflags=-O3 -Os -Wall -Werror-implicit-function-declaration -Wno-sign-compare -Wno-strict-aliasing -Wdouble-promotion -Wno-unused-local-typedefs -mcpu=cortex-m4 -mlittle-endian -mthumb -mfpu=fpv4-sp-d16 -mfloat-abi=hard -fsingle-precision-constant -ffast-math -D__FPU_PRESENT=1 -DARM_MATH_CM4 -fno-common -fno-exceptions -ffunction-sections -fdata-sections -nostartfiles -DHSE_VALUE={build.hse_value} -DCLKSRC_{build.clksrc} -DKODUINO_ISRS_{build.isrs} -DMAX_PROGRAM_SIZE={upload.maximum_size} -D{build.mcu} -DUSE_STDPERIPH_DRIVER -DSERIES_{build.series}

compiler.incflags="-I{compiler.cmsis_dir}Device/ST/{build.series}/Include" "-I{compiler.cmsis_dir}Include" "-I{compiler.stdperiph_dir}inc"
# -I$(VARIANT_DIR) -I$(CORE_DIR)

compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-std=c99 -Wall {compiler.bflags} {compiler.incflags}

compiler.c.elf.cmd=arm-none-eabi-g++
compiler.c.elf.flags={compiler.bflags} "-L{compiler.cmsis_dir}Lib/GCC" --static -Wl,--gc-sections "-T{build.variant.path}/{build.ldscript}" --specs=nano.specs -lnosys -lstdc++ -lm -u _printf_float

compiler.S.cmd=arm-none-eabi-as
compiler.S.flags=-mlittle-endian -mthumb

compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-std=c++11 -felide-constructors -fno-rtti {compiler.bflags} {compiler.incflags}

compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2hex.flags=-O binary
compiler.elf2hex.cmd=arm-none-eabi-objcopy

compiler.ldflags=

compiler.size.cmd=arm-none-eabi-size

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

# USB Flags
# ---------
# build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value. 
# build.usb_manufacturer="Unknown"


# ST compile patterns
# ---------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" -c {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" -c {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile assembly file
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" -c {compiler.c.flags} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {object_files} -Wl,-whole-archive "{build.variant.path}/spl.a" "{build.path}/{archive_file}" -Wl,-no-whole-archive -o "{build.path}/{build.project_name}.elf" -larm_cortexM4lf_math

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*


# STM32 Uploader tools
# -------------------

# DFU
tools.dfu_util.cmd=dfu-util
tools.dfu_util.cmd.windows=dfu-util-static.exe
# tools.dfu_util.path={runtime.ide.path}/hardware/koduino/stm32/system/dfu-util

tools.dfu_util.upload.params.verbose=-v
tools.dfu_util.upload.params.quiet=
tools.dfu_util.upload.pattern={cmd} -d 0483:df11 -a 0 -s 0x08000000 -D "{build.path}/{build.project_name}.bin"

# stm32ld
tools.stm32ld.cmd=stm32ld
tools.stm32ld.cmd.windows=stm32ld.exe
tools.stm32ld.cmd.macosx=stm32ld.mac
tools.stm32ld.path={runtime.ide.path}/hardware/koduino/stm32/system/stm32ld

tools.stm32ld.upload.params.verbose=
tools.stm32ld.upload.params.quiet=
tools.stm32ld.upload.pattern="{path}/{cmd}" {serial.port} {upload.baud} {upload.options} "{build.path}/{build.project_name}.bin" 1

# stm32loader
tools.stm32loader.cmd=stm32loader.py
tools.stm32loader.path={runtime.ide.path}/hardware/koduino/stm32/system
tools.stm32loader.upload.params.verbose=
tools.stm32loader.upload.params.quiet=
tools.stm32loader.upload.pattern=python "{path}/{cmd}" -p {serial.port} -b {upload.baud} -y {upload.options} -E {upload.maximum_size} -L {upload.eeplen} -ew "{build.path}/{build.project_name}.bin"

# ST-LINK (Windows)
tools.stlink.cmd=ST-LINK_CLI.exe
tools.stlink.cmd.windows=C:/Program Files (x86)/STMicroelectronics/STM32 ST-LINK Utility/ST-LINK Utility/ST-LINK_CLI.exe
tools.stlink.upload.params.verbose=
tools.stlink.upload.params.quiet=
tools.stlink.upload.pattern="{cmd}" {upload.options} -ME -P "{build.path}/{build.project_name}.bin" 0x08000000 -Rst

# stlink
tools.texanestlink.cmd=st-flash
tools.texanestlink.cmd.windows=st-flash.exe
tools.texanestlink.cmd.macosx=st-flash.mac
tools.texanestlink.path={runtime.ide.path}/hardware/koduino/stm32/system/stlink

tools.texanestlink.upload.params.verbose=
tools.texanestlink.upload.params.quiet=
tools.texanestlink.upload.pattern="{path}/{cmd}" write "{build.path}/{build.project_name}.bin" 0x08000000
