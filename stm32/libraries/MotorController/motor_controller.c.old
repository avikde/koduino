
#include "motor_controller.h"
#include "gpio.h"
#include "pulse_in.h"
#include "adc.h"


MotorControllerParams motorControllerParams = {
  .velSmooth = 0.8,
  .updateRate = 1000
};

// Private ======================================================================

// Common motor init
void motorInit(MotorInstance *M)
{
  motorSetPDType(M, SMOOTHED_VEL_PD);
  motorSetProperties(M, 0, 1);
  M->mode = MCM_OPEN_LOOP;
  M->val = 0;
  M->setpoint = 0;
  M->useBarrier = 0;
  M->barrierLimits.ll = M->barrierLimits.ul = 0;
  M->valScale = 1.0;
  M->enableFlag = 0; // Only matters for BLCon v3.4
}

// Just setting the motor pwm/dir/etc. "val" computed by "motorUpdate()"
void motorSendAction(MotorInstance *M)
{
  M->correctedVal = M->val;

  // Implement barrier
  BarrierLimits *bl = &M->barrierLimits;
  float pos = motorGetPosition(M);
  if (M->useBarrier && pos > bl->ll && pos < bl->ul)
  {
    float bgrad = -(-bl->ll - bl->ul + 2*pos)/((bl->ll - pos)*(bl->ll - pos) * (pos - bl->ul)*(pos - bl->ul));
    M->correctedVal += 0.01 * bgrad;
  }

  M->correctedVal = constrain(M->correctedVal * M->direction * M->driverDirection, -1, 1);

  // DEBUG
  M->correctedVal *= M->valScale;

  switch (M->driverType)
  {
    case POLOLU_HP:
      digitalWrite(M->dirPin, (M->correctedVal < 0) ? HIGH : LOW);
      // Temp for Anna testing with 24V battery, constrain to 12V
      analogWrite(M->rstPin, constrain(abs(M->correctedVal), 0, 0.5));
      break;
    case ESCON_50_5:
      analogWrite(M->pwmPin, map(M->correctedVal, -1, 1, 0.1, 0.9));
      break;
    case BLCON3:
      analogWrite(M->pwmPin, map(M->correctedVal, -1, 1, 0.1, 0.9));
      break;
    case BLCON3_4:
      if (M->enableFlag)
        analogWrite(M->pwmPin, map(M->correctedVal, -1, 1, 0.1, 0.9));
      else
        analogWrite(M->pwmPin, 0);
      break;
  }
}

// Helper function to stop motorUpdate doing the time-keeping for velocity calculations. This is for motorPair use.
float motorUpdateNoTimekeeping(MotorInstance *M)
{
  // Velocity calculation should happen independent of mode
  float error = fmodf_mpi_pi(motorGetPosition(M) - M->setpoint);
  float posCtrlVal;
  switch (M->pdType)
  {
    case ARM_PID:
      posCtrlVal = arm_pid_f32(&M->pid, -error);
      break;
    case SMOOTHED_VEL_PD:
    default:
      posCtrlVal = pdUpdate(&M->pd, error);
      break;
  }

  // In position mode, update the motor command
  if (M->mode == MCM_POSITION)
    M->val = posCtrlVal;
  // In open-loop mode, M->val has been set and nothing else needs to be done

  // Send command
  motorSendAction(M);

  // Return the command so that the slave can do the same thing
  return M->val;
}

// Public =======================================================================

void motorInitEscon(MotorInstance *M, PinName pwmPin, PinName enPin, int8_t driverDirection)
{
  motorInit(M);
  M->driverType = ESCON_50_5;
  M->pwmPin = pwmPin;
  analogWrite(pwmPin, 0.5);
  M->enPin = enPin;
  M->driverDirection = driverDirection;
}

void motorInitPololu(MotorInstance *M, PinName pwmPin, PinName dirPin, PinName rstPin, int8_t driverDirection)
{
  motorInit(M);
  M->driverType = POLOLU_HP;
  M->pwmPin = pwmPin;
  analogWrite(pwmPin, 0.0);
  M->dirPin = dirPin;
  M->rstPin = rstPin;
  M->driverDirection = driverDirection;
}

void motorInitBLCon3(MotorInstance *M, PinName pwmPin, PinName dPin, PinName posPin)
{
  motorInit(M);
  M->driverType = BLCON3;
  M->pwmPin = pwmPin;
  analogWrite(pwmPin, 0.5);
  M->dPin = dPin;
  digitalWrite(dPin, LOW);
  M->posPin = posPin;
  M->fbType = FB_PWM;
  M->fbFullRange = TWO_PI;
  M->driverDirection = 1;
}

void motorInitBLCon34(MotorInstance *M, PinName pwmPin, PinName posPin)
{
  motorInit(M);
  M->driverType = BLCON3_4;
  M->pwmPin = pwmPin;
  analogWrite(pwmPin, 0);
  M->posPin = posPin;
  M->fbType = FB_PWM_10_90;
  M->fbFullRange = TWO_PI;
  M->driverDirection = 1;
}

void motorSetPDType(MotorInstance *M, PDType pdType)
{
  M->pdType = pdType;
  switch (pdType)
  {
    case ARM_PID:
      arm_pid_init_f32(&M->pid, 1);
      break;
    case SMOOTHED_VEL_PD:
      pdInit(&M->pd, motorControllerParams.updateRate, motorControllerParams.velSmooth, DLPF_ANGRATE);
      break;
  }
}

void motorSetProperties(MotorInstance *M, float zero, int8_t direction)
{
  M->zero = zero;
  M->direction = direction;
}

void motorSetFeedback(MotorInstance *M, PinName posPin, FeedbackType fbType, float fullRange)
{
  M->fbType = fbType;
  M->posPin = posPin;
  M->fbFullRange = fullRange;
}

void motorSetBarrier(MotorInstance *M, float ll, float ul)
{
  M->useBarrier = 1;
  M->barrierLimits.ll = ll;
  M->barrierLimits.ul = ul;
}

void motorSetPGain(MotorInstance *M, float Kp)
{
  pdSetGains(&M->pd, Kp, 0);
}

//Enable/disable------------------------------------------

void motorEnable(MotorInstance *M, uint8_t enable)
{
  switch (M->driverType)
  {
    case ESCON_50_5:
      digitalWrite(M->enPin, enable);
      break;
    case POLOLU_HP:
      digitalWrite(M->pwmPin, enable);
      break;
    case BLCON3:
      digitalWrite(M->dPin, enable);
      break;
    case BLCON3_4:
      M->enableFlag = enable;
      break;
  }
}

//Feedback (measured and calculated)----------------------

float motorGetPosition(MotorInstance *M)
{
  float pos;
  switch (M->fbType)
  {
    case FB_ANALOG:
      pos = ADC_TO_FLOAT(analogRead(M->posPin)) * M->fbFullRange;
      break;
    case FB_PWM:
      pos = pulseIn(M->posPin) * M->fbFullRange;
      break;
    case FB_PWM_10_90:
      pos = map(pulseIn(M->posPin), 0.1, 0.9, 0, TWO_PI);
      break;
    default:
      pos = 0;
      break;
  }
  // Now pos is in [0, 2pi].
  return fmodf_mpi_pi(pos * M->direction - M->zero);
}

float motorGetVelocity(MotorInstance *M)
{
  switch (M->pdType)
  {
    case ARM_PID:
      // No direct speed calculation
      return 0;
    case SMOOTHED_VEL_PD:
    default:
      return M->pd.filt.vel;
  }
}

//Set motor move commands (but they are sent by motorUpdate())------

void motorSetOpenLoop(MotorInstance *M, float val)
{
  M->mode = MCM_OPEN_LOOP;
  M->val = val;
}

void motorSetPosition(MotorInstance *M, float setpoint)
{
  M->mode = MCM_POSITION;
  M->setpoint = setpoint;
}

// Update (updates PD controller, and sends commands)----------------

void motorUpdate(MotorInstance *M)
{
  // Timekeeping
  if (M->pdType == SMOOTHED_VEL_PD)
    M->pd.filt.frequency = motorControllerParams.updateRate;

  motorUpdateNoTimekeeping(M);
}

// ===============================================================================
// ===============================================================================

//Init--------------------------------------------------

void motorPairInit(MotorPair *S)
{
  S->left.mode = MCM_OPEN_LOOP;
  S->left.val = S->left.setpoint = 0;
  S->right.mode = MCM_OPEN_LOOP;
  S->right.val = S->right.setpoint = 0;

  // By default it tries to keep things together (diff mode is position)
  S->meanMode = MCM_OPEN_LOOP;
  S->diffMode = MCM_POSITION;
  S->meanVal = S->meanSetpoint = S->diffVal = S->diffSetpoint = 0;

  S->useMeanBarrier = S->useDiffBarrier = 0;
  S->meanBarrierLimits.ll = S->meanBarrierLimits.ul = S->diffBarrierLimits.ll = S->diffBarrierLimits.ul = 0;

  motorPairSetPDType(S, SMOOTHED_VEL_PD);
  motorPairSetMode(S, PCM_INDEPENDENT);
}

void motorPairSetPDType(MotorPair *S, PDType pdType)
{
  S->pdType = pdType;
  switch (pdType)
  {
    case ARM_PID:
      arm_pid_init_f32(&S->meanPID, 1);
      arm_pid_init_f32(&S->diffPID, 1);
      break;
    case SMOOTHED_VEL_PD:
      pdInit(&S->meanPD, motorControllerParams.updateRate, motorControllerParams.velSmooth, DLPF_ANGRATE);
      pdInit(&S->diffPD, motorControllerParams.updateRate, motorControllerParams.velSmooth, DLPF_ANGRATE);
      break;
  }
}

void motorPairSetPDGains(MotorPair *S, float indP, float indD, float meanP, float meanD, float diffP, float diffD)
{
  pdSetGains(&S->left.pd, indP, indD);
  pdSetGains(&S->right.pd, indP, indD);
  pdSetGains(&S->meanPD, meanP, meanD);
  pdSetGains(&S->diffPD, diffP, diffD);
}

void motorPairSetDiffGain(MotorPair *S, float diffP)
{
  pdSetGains(&S->diffPD, diffP, 0);
}

void motorPairSetMeanGain(MotorPair *S, float meanP)
{
  pdSetGains(&S->meanPD, meanP, 0);
}

void motorPairSetMode(MotorPair *S, PairControlMode pairControlMode)
{
  S->pairControlMode = pairControlMode;
}

void motorPairSetAllPGains(MotorPair *S, float Kp)
{
  motorPairSetPDGains(S, Kp, 0, Kp, 0, Kp, 0);
}

void motorPairSetMeanBarrier(MotorPair *S, float ll, float ul)
{
  S->useMeanBarrier = 1;
  S->meanBarrierLimits.ll = ll;
  S->meanBarrierLimits.ul = ul;
}

void motorPairSetDiffBarrier(MotorPair *S, float ll, float ul)
{
  S->useDiffBarrier = 1;
  S->diffBarrierLimits.ll = ll;
  S->diffBarrierLimits.ul = ul;
}

//Enable/disable------------------------------------------

void motorPairEnable(MotorPair *S, uint8_t enable)
{
  motorEnable(&S->left, enable);
  motorEnable(&S->right, enable);
}

//Feedback (measured and calculated)----------------------

float motorPairGetPosition(MotorPair *S, float *meanPosOut, float *diffPosOut)
{
  float lPos = motorGetPosition(&S->left);
  float rPos = motorGetPosition(&S->right);
  float mean, diff;
  circleMeanDiff(lPos, rPos, &mean, &diff);

  // float meanPos = 0.5 * (lPos + rPos);
  setOutPtrSafe(meanPosOut, mean);
  setOutPtrSafe(diffPosOut, diff);
  return mean;
}

float motorPairGetVelocity(MotorPair *S, float *meanVelOut, float *diffVelOut)
{
  switch (S->pdType)
  {
    case ARM_PID:
      // No direct speed calculation
      setOutPtrSafe(meanVelOut, 0);
      setOutPtrSafe(diffVelOut, 0);
      return 0;
    case SMOOTHED_VEL_PD:
    default:
      setOutPtrSafe(meanVelOut, S->meanPD.filt.vel);
      setOutPtrSafe(diffVelOut, S->diffPD.filt.vel);
      return S->meanPD.filt.vel;
  }
}

float motorPairGetVoltage(MotorPair *S, float *meanValOut, float *diffValOut)
{
  if (S->pairControlMode == PCM_MEAN_DIFF)
  {
    setOutPtrSafe(meanValOut, S->meanVal);
    setOutPtrSafe(diffValOut, S->diffVal);
    return S->meanVal;
  }
  else if (S->pairControlMode == PCM_INDEPENDENT)
  {
    setOutPtrSafe(meanValOut, 0.5 * (S->left.val + S->right.val));
    setOutPtrSafe(diffValOut, 0.5 * (S->left.val - S->right.val));
    return 0.5 * (S->left.val + S->right.val);
  }
  else if (S->pairControlMode == PCM_MASTER_SLAVE)
  {
    setOutPtrSafe(meanValOut, 0.5 * (S->left.val + S->right.val));
    setOutPtrSafe(diffValOut, 0.0);
    return 0.5 * (S->left.val + S->right.val);
  }
  else
    return 0.0;
}

//Set motor move commands (but they are sent by motorPairUpdate())---------

void motorPairSetMeanOpenLoop(MotorPair *S, float val)
{
  S->meanMode = MCM_OPEN_LOOP;
  S->meanVal = val;
}

void motorPairSetMeanPosition(MotorPair *S, float setpoint)
{
  S->meanMode = MCM_POSITION;
  S->meanSetpoint = setpoint;
}

void motorPairSetDiffOpenLoop(MotorPair *S, float val)
{
  S->diffMode = MCM_OPEN_LOOP;
  S->diffVal = val;
}

void motorPairSetDiffPosition(MotorPair *S, float setpoint)
{
  S->diffMode = MCM_POSITION;
  S->diffSetpoint = setpoint;
}

void motorPairSetOpenLoop(MotorPair *S, float val)
{
  motorSetOpenLoop(&S->left, val);
}

void motorPairSetPosition(MotorPair *S, float setpoint)
{
  motorSetPosition(&S->left, setpoint);
}

// Update (updates PD controller, and sends commands)----------------

void motorPairUpdate(MotorPair *S)
{
  // Timekeeping
  if (S->pdType == SMOOTHED_VEL_PD)
    S->meanPD.filt.frequency = S->diffPD.filt.frequency = S->left.pd.filt.frequency = S->right.pd.filt.frequency = motorControllerParams.updateRate;

  // Update based on mode
  if (S->pairControlMode == PCM_MEAN_DIFF)
  {
    // Velocity calculation should happen independent of mode
    float meanPos, diffPos;
    motorPairGetPosition(S, &meanPos, &diffPos);

    float meanError = fmodf_mpi_pi(meanPos - S->meanSetpoint);
    float diffError = fmodf_mpi_pi(diffPos - S->diffSetpoint);
    float meanPosCtrlVal, diffPosCtrlVal;
    switch (S->pdType)
    {
      case ARM_PID:
        meanPosCtrlVal = arm_pid_f32(&S->meanPID, -meanError);
        diffPosCtrlVal = arm_pid_f32(&S->diffPID, -diffError);
        break;
      case SMOOTHED_VEL_PD:
      default:
        meanPosCtrlVal = pdUpdate(&S->meanPD, meanError);
        diffPosCtrlVal = pdUpdate(&S->diffPD, diffError);
        break;
    }

    // In position mode, update the motor command
    if (S->meanMode == MCM_POSITION)
      S->meanVal = meanPosCtrlVal;
    if (S->diffMode == MCM_POSITION)
      S->diffVal = diffPosCtrlVal;
    // In open-loop mode, S->*Val has been set and nothing else needs to be done

    // FIXME: Implement barrier

    // Invert the mean/diff coordinate change
    S->left.val = S->meanVal + S->diffVal;
    S->right.val = S->meanVal - S->diffVal;

    // Send action
    motorSendAction(&S->left);
    motorSendAction(&S->right);
  }
  else if (S->pairControlMode == PCM_INDEPENDENT)
  {
    // Update each motor separately
    motorUpdateNoTimekeeping(&S->left);
    motorUpdateNoTimekeeping(&S->right);
  }
  else if (S->pairControlMode == PCM_MASTER_SLAVE)
  {
    // Left motor is master, use it's "val"
    S->right.val = motorUpdateNoTimekeeping(&S->left);
    motorSendAction(&S->right);
  }
}



