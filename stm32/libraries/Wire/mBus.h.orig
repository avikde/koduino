//-----------------------------------------------------------------------------
// MAEVARM M4 STM32F373 mBus 
// version: 1.0
// date: March 22, 2013
// author: Neel Shah (neels@seas.upenn.edu)
//
// edited: Matthew Piccoli (piccoli@seas.upenn.edu)
// date: 5/27/2013
// Adding support for multiple mB
//-----------------------------------------------------------------------------

#ifndef __m_bus
#define __m_bus

#include "Arduino.h"
#include "stm32f37x_i2c_cpal.h"

// Avik mods ======================================================
// I2C Timing constants:
typedef enum
{
//FastMode+ -  1 MHz speed (Rise time = 26ns, Fall time = 2ns, Analog Filter OFF)
//FastMode - 400 KHz speed (Rise time = 100ns, Fall time = 10ns, Analog Filter ON)
//Standard - 100 KHz speed (Rise time = 100ns, Fall time = 10ns, Analog Filter ON)
  I2C_Timing_FastModePlus = 0x00C71030,
  I2C_Timing_FastMode = 0x6043070E,
  I2C_Timing_Standard = 0x60C3283A,
  I2C_Timing_600KHz = 0x50330309,// From STM32 reference, page 548
  I2C_Timing_FastestThatWorks = 0x2043070E// prescaler from "fastmode" changed ~933KHz?
} I2C_Timing_RegType;
void configI2CTiming(uint32_t timing);
void mBusSetTimeoutLED(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin);
void mBusTimeoutLEDOff();
//=================================================================

typedef struct
{
  CPAL_InitTypeDef* CPAL_InitStruct;
  CPAL_TransferTypeDef mBusRx;
  CPAL_TransferTypeDef mBusTx;
  uint8_t bufferWr[2];
  uint8_t bufferRd[2];
  uint8_t bufferBurstWr[256];
  uint8_t bufferBurstRd[256];
  __IO uint8_t mBusReadBurstReady;
  __IO uint8_t mBusReadBurstStartFlag;
} mBusTypeDef;

void mBusInit(uint8_t i2cNum);
void mBusRestart(uint8_t i2cNum);

uint8_t mBusPeriphReady(uint8_t slaveAddr, uint8_t i2cNum);

uint8_t mBusWrite(uint8_t slaveAddr, uint8_t regAddr, uint8_t data, uint8_t i2cNum);
uint8_t mBusRead (uint8_t slaveAddr, uint8_t regAddr, uint8_t i2cNum);

uint8_t mBusWriteBurst(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t* data, uint8_t i2cNum);
uint8_t mBusReadBurst (uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t* data, uint8_t i2cNum);

uint8_t mBusWriteNoAdd(uint8_t slaveAddr, uint8_t data, uint8_t i2cNum);
uint8_t mBusReadNoAdd (uint8_t slaveAddr, uint8_t i2cNum);

uint8_t mBusWriteBurstNoAdd(uint8_t slaveAddr, uint8_t length, uint8_t* data, uint8_t i2cNum);
uint8_t mBusReadBurstNoAdd (uint8_t slaveAddr, uint8_t length, uint8_t* data, uint8_t i2cNum);

//Non Blocking functions, user takes care of waiting and other stuff 
uint8_t mBusWriteBurstNB(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t* data, uint8_t i2cNum);
uint8_t mBusReadBurstStartNB(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t i2cNum);
uint8_t mBusReadBurstDataNB (uint8_t length, uint8_t* data, uint8_t i2cNum);

void CPAL_I2C_ERR_UserCallback(CPAL_DevTypeDef pDevInstance, uint32_t DeviceError);
uint32_t CPAL_TIMEOUT_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_TXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_RXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_TX_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_RX_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_DMATXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_DMATXHT_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_DMATXTE_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
void CPAL_I2C_DMARXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_DMARXHT_UserCallback(CPAL_InitTypeDef* pDevInitStruct);
//void CPAL_I2C_DMARXTE_UserCallback(CPAL_InitTypeDef* pDevInitStruct);

#endif