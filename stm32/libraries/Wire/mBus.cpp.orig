//-----------------------------------------------------------------------------
// MAEVARM M4 STM32F373 mBus
// version: 1.0
// date: March 22, 2013
// author: Neel Shah (neels@seas.upenn.edu)
//
// edited: Matthew Piccoli (piccoli@seas.upenn.edu)
// date: 5/27/2013
// Adding support for multiple mBuses
//-----------------------------------------------------------------------------

#include "mBus.h"

//TODO::wrap these in #ifdef
mBusTypeDef mBus1;
mBusTypeDef mBus2;

// Avik mods ======================================================
// Globals
GPIO_TypeDef *timeoutLEDport = GPIOB;
uint32_t timeoutLEDpin = GPIO_Pin_15;
//
uint32_t i2cTiming = I2C_Timing_FastMode;
void configI2CTiming(uint32_t timing)
{
  i2cTiming = timing;
}
void mBusSetTimeoutLED(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
  timeoutLEDport = GPIOx;
  timeoutLEDpin = GPIO_Pin;
}

void mBusTimeoutLEDOff()
{
  timeoutLEDport->BSRR = timeoutLEDpin;
}

//=================================================================

mBusTypeDef* getmBusPtr(uint8_t i2cNum)
{
  if (i2cNum == 1)
    return &mBus1;
  else //if (i2cNum == 2)
    return &mBus2;
  //else
    // error condition.  This Micro only has 2 i2c peripherals.
}

void mBusInit(uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  if(i2cNum == 1)
  {
    RCC_I2CCLKConfig(RCC_I2C1CLK_SYSCLK);
    mBusCurrent->CPAL_InitStruct = &I2C1_DevStructure;
    CPAL_I2C_StructInit(mBusCurrent->CPAL_InitStruct);
    //mBusStruct->CPAL_Dev = CPAL_I2C1;
  }
  else //if(i2cNum == 2)
  {
    RCC_I2CCLKConfig(RCC_I2C2CLK_SYSCLK);
    mBusCurrent->CPAL_InitStruct = &I2C2_DevStructure;
    CPAL_I2C_StructInit(mBusCurrent->CPAL_InitStruct);
    //mBusStruct->CPAL_Dev = CPAL_I2C2;
    // TODO::Setup GPIOs
  }
  //else
    // Error condition.  Return Error
    
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
	mBusCurrent->mBusRx.pbBuffer = 0; //buffer pointer data
  mBusCurrent->mBusRx.wNumData =  0;     //length of data
  mBusCurrent->mBusRx.wAddr1 = 0;     //slaveAddr
  mBusCurrent->mBusRx.wAddr2 = 0;    //regAddr
  /* Initialize RX Transfer structure */
  mBusCurrent->mBusTx.pbBuffer = 0; //buffer pointer data
  mBusCurrent->mBusTx.wNumData =  0;     //length of data
  mBusCurrent->mBusTx.wAddr1 = 0;     //slaveAddr
  mBusCurrent->mBusTx.wAddr2 = 0;    //regAddr
      
  mBusStruct->CPAL_Direction = CPAL_DIRECTION_TXRX;
  mBusStruct->CPAL_Mode = CPAL_MODE_MASTER;
  mBusStruct->CPAL_ProgModel = CPAL_PROGMODEL_DMA;
  mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx);
  mBusStruct->pCPAL_TransferRx = &(mBusCurrent->mBusRx);
  mBusStruct->wCPAL_Options = CPAL_OPT_I2C_AUTOMATIC_END;
  mBusStruct->pCPAL_I2C_Struct->I2C_Timing = i2cTiming;
  mBusStruct->pCPAL_I2C_Struct->I2C_AnalogFilter = I2C_AnalogFilter_Enable;
  mBusStruct->pCPAL_I2C_Struct->I2C_DigitalFilter = 0x00;
  mBusStruct->pCPAL_I2C_Struct->I2C_Mode = I2C_Mode_I2C;
  mBusStruct->pCPAL_I2C_Struct->I2C_OwnAddress1 = 0x00;
  mBusStruct->pCPAL_I2C_Struct->I2C_Ack = I2C_Ack_Enable;
  mBusStruct->pCPAL_I2C_Struct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
  CPAL_I2C_Init(mBusStruct);
}

void mBusRestart(uint8_t i2cNum)
{
	mBusInit(i2cNum);
}

uint8_t mBusPeriphReady(uint8_t slaveAddr, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
	mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx);     
  mBusStruct->pCPAL_TransferTx->wAddr1 = (uint32_t)slaveAddr;
  if(CPAL_I2C_IsDeviceReady(mBusStruct) == CPAL_FAIL)
  {
    mBusStruct->CPAL_State = CPAL_STATE_READY;
    return ERROR;
  }
  else 
  {
    mBusStruct->CPAL_State = CPAL_STATE_READY;
    return SUCCESS;
  }
}

uint8_t mBusWrite(uint8_t slaveAddr, uint8_t regAddr, uint8_t data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
	mBusCurrent->bufferWr[0] = data;
	mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx); 
  mBusStruct->pCPAL_TransferTx->wNumData = 1;
 	mBusStruct->pCPAL_TransferTx->pbBuffer = mBusCurrent->bufferWr;
  mBusStruct->pCPAL_TransferTx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferTx->wAddr2   = (uint32_t)regAddr;

  if (CPAL_I2C_Write(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if (mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      return ERROR;
    }
    return SUCCESS;
  }
  else 
  {
    return ERROR;
  }
}

uint8_t mBusRead(uint8_t slaveAddr, uint8_t regAddr, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
	mBusCurrent->bufferRd[0] = 0;
	mBusStruct->pCPAL_TransferRx = &mBusCurrent->mBusRx; 
  mBusStruct->pCPAL_TransferRx->wNumData = 1;
 	mBusStruct->pCPAL_TransferRx->pbBuffer = mBusCurrent->bufferRd;
  mBusStruct->pCPAL_TransferRx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferRx->wAddr2   = (uint32_t)regAddr;

  if(CPAL_I2C_Read(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
	  if(mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      return ERROR;
    }
    return mBusCurrent->bufferRd[0];
  }
  else
  {
    return ERROR;
  }	
}
uint8_t mBusWriteBurst(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
	uint8_t i;
	for(i=0;i<length;i++)
	{
		mBusCurrent->bufferBurstWr[i] = data[i];	
	}
	mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx); 
  mBusStruct->pCPAL_TransferTx->wNumData = length;
 	mBusStruct->pCPAL_TransferTx->pbBuffer = mBusCurrent->bufferBurstWr;
  mBusStruct->pCPAL_TransferTx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferTx->wAddr2   = (uint32_t)regAddr;

  if(CPAL_I2C_Write(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if (mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      return ERROR;
    }
    return SUCCESS;
  }
  else 
  {
    return ERROR;
  }
}

uint8_t mBusReadBurst(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  mBusStruct->pCPAL_TransferRx = &(mBusCurrent->mBusRx); 
  mBusStruct->pCPAL_TransferRx->wNumData = length;
  mBusStruct->pCPAL_TransferRx->pbBuffer = mBusCurrent->bufferBurstRd;
  mBusStruct->pCPAL_TransferRx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferRx->wAddr2   = (uint32_t)regAddr;

  if(CPAL_I2C_Read(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if(mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      return ERROR;
    }
    for(uint8_t i=0;i<length;i++)
    {
      data[i] = mBusCurrent->bufferBurstRd[i]; 
    }
    return SUCCESS;
  }
  else
  {
    return ERROR;
  }
}



uint8_t mBusWriteNoAdd(uint8_t slaveAddr, uint8_t data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  mBusCurrent->bufferWr[0] = data;
  mBusStruct->wCPAL_Options |= CPAL_OPT_NO_MEM_ADDR;
  mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx); 
  mBusStruct->pCPAL_TransferTx->wNumData = 1;
  mBusStruct->pCPAL_TransferTx->pbBuffer = mBusCurrent->bufferWr;
  mBusStruct->pCPAL_TransferTx->wAddr1   = (uint32_t)slaveAddr;

  if(CPAL_I2C_Write(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if (mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
      return ERROR;
    }
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return SUCCESS;
  }
  else 
  {
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return ERROR;
  }
}
uint8_t mBusReadNoAdd(uint8_t slaveAddr, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  mBusCurrent->bufferRd[0] = 0;
  mBusStruct->wCPAL_Options |= CPAL_OPT_NO_MEM_ADDR;
  mBusStruct->pCPAL_TransferRx = &(mBusCurrent->mBusRx); 
  mBusStruct->pCPAL_TransferRx->wNumData = 1;
  mBusStruct->pCPAL_TransferRx->pbBuffer = mBusCurrent->bufferRd;
  mBusStruct->pCPAL_TransferRx->wAddr1   = (uint32_t)slaveAddr;

  if(CPAL_I2C_Read(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if(mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
      return ERROR;
    }
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return mBusCurrent->bufferRd[0];
  }
  else
  {
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return ERROR;
  } 
}
uint8_t mBusWriteBurstNoAdd(uint8_t slaveAddr, uint8_t length, uint8_t *data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  uint8_t i;
  for(i=0;i<length;i++)
  {
    mBusCurrent->bufferBurstWr[i] = data[i]; 
  }
  mBusStruct->wCPAL_Options |= CPAL_OPT_NO_MEM_ADDR;
  mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx); 
  mBusStruct->pCPAL_TransferTx->wNumData = length;
  mBusStruct->pCPAL_TransferTx->pbBuffer = mBusCurrent->bufferBurstWr;
  mBusStruct->pCPAL_TransferTx->wAddr1   = (uint32_t)slaveAddr;

  if(CPAL_I2C_Write(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if (mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
      return ERROR;
    }
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return SUCCESS;
  }
  else 
  {
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return ERROR;
  }
}
uint8_t mBusReadBurstNoAdd(uint8_t slaveAddr, uint8_t length, uint8_t *data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  mBusStruct->wCPAL_Options |= CPAL_OPT_NO_MEM_ADDR;
  mBusStruct->pCPAL_TransferRx = &(mBusCurrent->mBusRx); 
  mBusStruct->pCPAL_TransferRx->wNumData = length;
  mBusStruct->pCPAL_TransferRx->pbBuffer = mBusCurrent->bufferBurstRd;
  mBusStruct->pCPAL_TransferRx->wAddr1   = (uint32_t)slaveAddr;

  if(CPAL_I2C_Read(mBusStruct) == CPAL_PASS)
  {
    while((mBusStruct->CPAL_State != CPAL_STATE_READY) && (mBusStruct->CPAL_State != CPAL_STATE_ERROR)){}
    if(mBusStruct->CPAL_State == CPAL_STATE_ERROR)
    {
      mBusStruct->CPAL_State = CPAL_STATE_READY;
      mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
      return ERROR;
    }
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    for(uint8_t i=0;i<length;i++)
    {
      data[i] = mBusCurrent->bufferBurstRd[i]; 
    }
    return SUCCESS;
  }
  else
  {
    mBusStruct->wCPAL_Options &= ~CPAL_OPT_NO_MEM_ADDR;
    return ERROR;
  }
}

uint8_t mBusWriteBurstNB(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  uint8_t i;
  for(i=0;i<length;i++)
  {
    mBusCurrent->bufferBurstWr[i] = data[i]; 
  }
  mBusStruct->pCPAL_TransferTx = &(mBusCurrent->mBusTx); 
  mBusStruct->pCPAL_TransferTx->wNumData = length;
  mBusStruct->pCPAL_TransferTx->pbBuffer = mBusCurrent->bufferBurstWr;
  mBusStruct->pCPAL_TransferTx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferTx->wAddr2   = (uint32_t)regAddr;

  if(CPAL_I2C_Write(mBusStruct) == CPAL_PASS)
  {
    return SUCCESS;
  }
  else 
  {
    return ERROR;
  }
}
uint8_t mBusReadBurstStartNB(uint8_t slaveAddr, uint8_t regAddr, uint8_t length, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
  CPAL_InitTypeDef* mBusStruct = mBusCurrent->CPAL_InitStruct;
  if(mBusStruct->CPAL_State != CPAL_STATE_READY){return ERROR;}
	mBusStruct->pCPAL_TransferRx = &(mBusCurrent->mBusRx); 
  mBusStruct->pCPAL_TransferRx->wNumData = length;
 	mBusStruct->pCPAL_TransferRx->pbBuffer = mBusCurrent->bufferBurstRd;
  mBusStruct->pCPAL_TransferRx->wAddr1   = (uint32_t)slaveAddr;
  mBusStruct->pCPAL_TransferRx->wAddr2   = (uint32_t)regAddr;

  	if(CPAL_I2C_Read(mBusStruct) == CPAL_PASS)
  	{
      mBusCurrent->mBusReadBurstStartFlag=1;
  		return SUCCESS;
  	}
  	else 
  	{
  		return ERROR;
  	}
}
uint8_t mBusReadBurstDataNB(uint8_t length, uint8_t* data, uint8_t i2cNum)
{
  mBusTypeDef* mBusCurrent = getmBusPtr(i2cNum);
	if(mBusCurrent->mBusReadBurstReady)
	{
		for(uint8_t i=0;i<length;i++)
    {
      data[i] = mBusCurrent->bufferBurstRd[i]; 
    }
		mBusCurrent->mBusReadBurstReady = 0;
    mBusCurrent->mBusReadBurstStartFlag=0;
		return SUCCESS;
	}
	else
	{
		return ERROR;
	}
}

uint32_t CPAL_TIMEOUT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
{
  /*uint32_t i;
	for(i=0; i<10; i++)
    {
    	mGreenON; mRedON; mYellowON; mBlueON; mWhiteON;
    	mWait(800000);
    	mGreenOFF; mRedOFF; mYellowOFF; mBlueOFF; mWhiteOFF;
    	mWait(800000);  	
    }
	mBusRestart();*/
    timeoutLEDport->ODR ^= timeoutLEDpin;
    pDevInitStruct->CPAL_State = CPAL_STATE_READY;
  	return CPAL_PASS;
}

/*=========== Transfer UserCallback ===========*/

//void CPAL_I2C_TXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_RXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_TX_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ } //
//void CPAL_I2C_RX_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_DMATXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_DMATXHT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_DMATXTE_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
void CPAL_I2C_DMARXTC_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
{
  mBusTypeDef* mBusCurrent;
  if (pDevInitStruct->CPAL_Dev == CPAL_I2C1)
    mBusCurrent = &mBus1;
  else if (pDevInitStruct->CPAL_Dev == CPAL_I2C2)
    mBusCurrent = &mBus1;
  else
    return;
  if(mBusCurrent->mBusReadBurstStartFlag == 1)
	{
    mBusCurrent->mBusReadBurstReady = 1;
  }
}
//void CPAL_I2C_DMARXHT_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
//void CPAL_I2C_DMARXTE_UserCallback(CPAL_InitTypeDef* pDevInitStruct)
//{ }
void CPAL_I2C_ERR_UserCallback(CPAL_DevTypeDef pDevInstance, uint32_t DeviceError)
{
  if (pDevInstance == CPAL_I2C1)
    mBusRestart(1);
  else if (pDevInstance == CPAL_I2C2)
    mBusRestart(2);
    
	/*if ((DeviceError & CPAL_I2C_ERR_BERR) != 0)
      {mGreenON; mWaitms(2000);}
  if ((DeviceError & CPAL_I2C_ERR_ARLO) != 0)
      {mYellowON;mWaitms(2000);}
  if ((DeviceError & CPAL_I2C_ERR_AF) != 0)
      {mRedON;   mWaitms(2000);}
  if ((DeviceError & CPAL_I2C_ERR_OVR) != 0)
      {mBlueON;  mWaitms(2000);}
  if ((DeviceError & CPAL_I2C_ERR_TIMEOUT) != 0)
      {mWhiteON; mWaitms(2000);}
*/
}